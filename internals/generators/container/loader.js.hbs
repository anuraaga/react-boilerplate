/*
 *
 * Asynchronously loads the components for {{ properCase name }}
 *
 */

{{#if wantActionsAndReducer}}
import { errorLoading, getAsyncInjectors } from 'utils/asyncInjectors';

export default (store) => {
  const { injectReducer{{#if wantSagas}}, injectSagas{{/if}} } = getAsyncInjectors(store);
  return (cb) => {
    const importModules = Promise.all([
      import('containers/{{ properCase name }}/reducer'),
      {{#if wantSagas}}
      import('containers/{{ properCase name }}/sagas'),
      {{/if}}
      import('containers/{{ properCase name }}'),
    ]);

    importModules.then(([reducer,{{#if wantSagas}} sagas,{{/if}} component]) => {
      injectReducer('{{ camelCase name }}', reducer.default);
      {{#if wantSagas}}
      injectSagas(sagas.default);
      {{/if}}
      cb(component);
    });

    importModules.catch(errorLoading);
  };
};
{{else}}
import { errorLoading } from 'utils/asyncInjectors';

export default () => (cb) => {
  import('containers/{{ properCase name }}')
    .then(cb)
    .catch(errorLoading);
};
{{/if}}
